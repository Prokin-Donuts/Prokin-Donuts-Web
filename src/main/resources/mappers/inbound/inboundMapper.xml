<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.donut.prokindonutsweb.inbound.mapper.InboundMapper">

<!--    입고를 요청할 때 필요한 제품 리스트를 반환한다-->
    <select id="selectAllProductList" resultType="com.donut.prokindonutsweb.inbound.vo.ProductVO">
        select productCode, productName, productPrice, storedType from product
    </select>

<!--    입고 정보를 저장한다. -->
    <insert id="insertInbound">
        Insert into inbound (inboundCode, inboundDate, inboundStatus, warehouseCode)
        values (#{inboundCode},#{inboundDate},#{inboundStatus}, #{warehouseCode})
    </insert>

<!--    입고상세 정보를 저장한다.-->
    <insert id="insertInboundDetailList" parameterType="java.util.List">
        INSERT INTO inboundDetail ( inboundDetailCode, quantity, inboundCode, productCode, sectionCode )
        VALUES
        <foreach collection="list" item="detail" separator=",">
            (
            #{detail.inboundDetailCode},
            #{detail.quantity},
            #{detail.inboundCode},
            #{detail.productCode},
            #{detail.sectionCode}
            )
        </foreach>
    </insert>

<!--    창고코드를 가져온다.-->
    <select id="selectWarehouseCode" resultType="String">
        select warehouseCode From warehouse where memberCode = #{memberCode}
    </select>


    <select id="selectInboundCode" resultType="String">
        Select inboundCode From Inbound Order by CAST(substring(inboundCode, 3) AS UNSIGNED) DESC LIMIT 1
    </select>

<!--    창고관리자 - 입고관리-->

<!--    입고목록 반환-->
    <select id="selectAllInboundList" resultType="com.donut.prokindonutsweb.inbound.vo.InboundVO">
        select inboundCode, inboundDate, inboundStatus, warehouseCode from Inbound
    </select>

<!--    입고상세 목록 반환-->
    <select id="selectAllInboundDetailList" resultType="com.donut.prokindonutsweb.inbound.dto.InboundDetailVO">
        select inboundDetailCode, quantity, inboundCode, productCode, sectionCode from InboundDetail
    </select>

<!--    제품이름 반환 -->
    <select id="selectProductName" resultType="String">
        select productName from Product where productCode = #{productCode}
    </select>

<!--    제품 가격 반환-->
    <select id="selectProductPrice" resultType="Integer">
        select productPrice from Product where productCode = #{productCode}
    </select>


<!--    입고 완료시 입고 상태 변경-->
    <update id="approveInbound">
        update inbound set inboundStatus = "입고완료" where inboundCode = #{inboundCode}
    </update>

<!--    입고 완료시 재고에 반영(트리거를 직접 구현)-->
    <insert id="updateInventory" parameterType="com.donut.prokindonutsweb.inbound.vo.InventoryVO">
        Insert into inventory (inventoryCode, quantity, productCode, warehouseCode)
        values (#{inventoryCode}, #{quantity}, #{productCode}, #{warehouseCode})
        on DUPLICATE KEY update quantity = quantity + #{quantity}
    </insert>

<!--    입고 날짜 수정-->
    <update id = "updateInboundDate">
        update Inbound Set inboundDate = #{inboundDate} where InboundCode=#{inboundCode}
    </update>

<!--    입고 수량 변경-->
    <update id="updateInbound">
            UPDATE inboundDetail
            SET quantity = #{quantity}
            WHERE productCode = #{productCode}
            AND inboundCode = #{inboundCode}
    </update>



<!--    입고코드 -> 입고상세 목록 반환-->
    <select id="selectInboundDetailList" resultType="com.donut.prokindonutsweb.inbound.dto.InventoryDTO">
        select i.warehouseCode, quantity, productCode
        from inbound i, inboundDetail d
        where i.inboundCode = d.inboundCode and i.inboundCode = #{inboundCode}
    </select>

<!--    입고 취소 (입고상태 -> 입고취소로 변경)-->
    <update id="deleteInbound">
        update inbound set inboundStatus = "입고취소" where inboundCode = #{inboundCode}
    </update>

<!--    창고관리자 입고 현황-->

<!--    입고현황 목록 반환-->
    <select id="selectAllInboundStatusList" resultType="com.donut.prokindonutsweb.inbound.vo.InboundStatusVO">
        select i.inboundCode, p.productCode, p.productName, p.productPrice, i.inboundDate, i.inboundStatus, d.sectionCode, d.quantity
        from inbound i, inboundDetail d, product p
        where i.inboundCode = d.inboundCode and p.productCode = d.productCode
    </select>

<!--    입고상태 변경 ( -> 승인대기)-->
    <update id="updateQhInboundStatus">
        update inbound set inboundStatus = "승인대기" where inboundCode = #{inboundCode}
    </update>
</mapper>