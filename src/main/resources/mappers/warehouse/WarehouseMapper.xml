<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.donut.prokindonutsweb.mappers.warehouse.WarehouseMapper">

    <!-- 1) 창고 조회 -->
    <select id="selectWarehouseList" resultType="WarehouseDTO">
        SELECT
            w.warehouseCode,
            w.warehouseName,
            w.capacityLimit,
            w.address,
            w.memberCode,
            m.name   AS memberName,
            m.email  AS memberEmail
        FROM Warehouse w
        LEFT JOIN MemberAccount m
        ON w.memberCode = m.memberCode
    </select>

    <!-- 2) 창고 등록 -->
    <insert id="insertWarehouse" parameterType="WarehouseVO">
        INSERT INTO Warehouse
            (warehouseCode, warehouseName, capacityLimit, address, memberCode)
        VALUES
            (#{warehouseCode}, #{warehouseName}, #{capacityLimit}, #{address}, #{memberCode})
    </insert>

    <!-- 3) 창고 수정 -->
    <update id="updateWarehouse" parameterType="WarehouseVO">
        UPDATE Warehouse
        SET warehouseName   = #{warehouseName},
            memberCode      = #{memberCode}
        WHERE warehouseCode   = #{warehouseCode}
    </update>

    <!-- 4) 창고 삭제 -->
    <delete id="deleteWarehouse" parameterType="WarehouseVO">
        DELETE FROM Warehouse
        WHERE warehouseCode = #{warehouseCode}
    </delete>

    <!-- 5) 할당되지 않은 창고 관리자 목록 조회 -->
    <select id="selectUnAccountWMList" resultType="MemberAccountVO">
        SELECT
            m.memberCode,
            m.authorityCode,
            m.name
        FROM MemberAccount m
        WHERE m.memberCode NOT IN (
            SELECT w.memberCode
            FROM Warehouse w
            WHERE w.memberCode IS NOT NULL
        ) AND m.authorityCode LIKE '%WM%'
    </select>

    <!-- 6) 창고명 중복 확인 -->
    <select id="checkWarehouseDuplicate" resultType="int">
        SELECT COUNT(*)
        FROM Warehouse
        WHERE warehouseName = #{warehouseName}
        <if test="warehouseCode != null and warehouseCode != ''">
            AND warehouseCode != #{warehouseCode}
        </if>
    </select>

    <!-- 7) prefix로 시작하는 기존 창고코드들 조회 -->
    <select id="selectWarehouseCodesByPrefix" resultType="string">
        SELECT warehouseCode
        FROM Warehouse
        WHERE warehouseCode LIKE CONCAT(#{prefix}, '%')
    </select>

    <!-- 8) 창고 상태를 조회 (입고진행, 출고진행(보류), 재고있음, 삭제가능) -->
    <select id="selectWarehouseStatus" resultType="string">
        SELECT
            CASE
                WHEN EXISTS (
                    SELECT 1 FROM Inbound
                    WHERE warehouseCode = #{warehouseCode}
                      AND inboundStatus IN ('입고진행', '승인대기')
                ) THEN '입고진행'
                WHEN EXISTS (
                    SELECT 1 FROM Inventory
                    WHERE warehouseCode = #{warehouseCode}
                      AND quantity > 0
                ) THEN '재고있음'
                ELSE '삭제가능'
                END AS status
    </select>

</mapper>