<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.donut.prokindonutsweb.outbound.mapper.OutboundMapper">

    <!-- 출고 목록 반환-->
    <select id="selectAllOutboundList" resultType="com.donut.prokindonutsweb.outbound.dto.OutboundDTO">
        SELECT
        o.outboundCode,
        p.productCode,
        p.productName,
        o.outboundDate,
        o.vehicleCode,
        od.franchiseCode,
        o.outboundStatus
        FROM outbound o
        JOIN inventory i ON o.inventoryCode = i.inventoryCode
        JOIN product p ON i.productCode = p.productCode
        JOIN orderdetail odd ON o.orderDetailCode = odd.orderDetailCode
        JOIN `order` od ON od.orderCode = odd.orderCode
        WHERE i.warehouseCode = #{warehouseCode}
    </select>

    <!-- 출고요청 목록 반환-->
    <select id="selectApprovalOutboundList" resultType="com.donut.prokindonutsweb.outbound.dto.OutboundDTO">
        SELECT
        o.outboundCode,
        p.productCode,
        p.productName,
        o.outboundDate,
        od.franchiseCode,
        o.outboundStatus,
        o.quantity
        FROM outbound o
        JOIN inventory i ON o.inventoryCode = i.inventoryCode
        JOIN product p ON i.productCode = p.productCode
        JOIN orderdetail odd ON o.orderDetailCode = odd.orderDetailCode
        JOIN `order` od ON od.orderCode = odd.orderCode
        WHERE i.warehouseCode = #{warehouseCode}
        AND o.outboundStatus = "출고대기"
    </select>

    <!-- 출고준비 목록 반환-->
    <select id="selectCompletionOutboundList" resultType="com.donut.prokindonutsweb.outbound.dto.OutboundDTO">
        SELECT
        o.outboundCode,
        p.productCode,
        p.productName,
        o.outboundDate,
        od.franchiseCode,
        o.outboundStatus,
        o.quantity
        FROM outbound o
        JOIN inventory i ON o.inventoryCode = i.inventoryCode
        JOIN product p ON i.productCode = p.productCode
        JOIN orderdetail odd ON o.orderDetailCode = odd.orderDetailCode
        JOIN `order` od ON od.orderCode = odd.orderCode
        WHERE i.warehouseCode = #{warehouseCode}
        AND o.outboundStatus = "출고준비"
    </select>

    <!-- 출고코드로 상품 보관타입 반환-->
    <select id="selectStoredType" resultType="String">
        SELECT p.storedType
        FROM outbound o
        JOIN inventory i ON o.inventoryCode = i.inventoryCode
        JOIN product p ON i.productCode = p.productCode
        WHERE o.outboundCode = #{outboundCode}
    </select>

    <!-- 출고코드로 상품 제품수량 반환-->
    <select id="selectQuantity" resultType="int">
        SELECT quantity
        FROM outbound
        WHERE outboundCode = #{outboundCode}
    </select>

    <!-- 재고 존재 확인 반환-->
    <select id="checkInventory" resultType="boolean">
        select case
        when COUNT(*) = SUM(CASE when i.quantity >= o.quantity THEN 1 ELSE 0 END)
        THEN TRUE
        ELSE FALSE
        END AS IsAllProductEnough
        from outbound o, Inventory i
        Where o.outboundCode = #{outboundCode}
    </select>

    <!--    출고상태 변경 (-> 출고준비)-->
    <update id="approveOutbound">
        update outbound set outboundStatus = "출고준비" where outboundCode = #{outboundCode}
    </update>

    <!--    출고상태 변경 (-> 출고완료)-->
    <update id="completionOutbound">
        update outbound set outboundStatus = "출고완료" where outboundCode = #{outboundCode}
    </update>

    <!--    발주상태 변경 (-> 배송중)-->
    <update id="completionOrder">
        UPDATE orderdetail od
        JOIN outbound o ON o.orderdetailCode = od.orderdetailCode
        SET od.orderStatus = '배송중'
        WHERE o.outboundCode = #{outboundCode}
    </update>

    <!--    재고차감 (출고승인) -->
    <update id="updateInventory">
        UPDATE Inventory i
        JOIN Outbound o ON i.inventoryCode = o.inventoryCode
        SET i.quantity = i.quantity - o.quantity
        WHERE o.outboundCode = #{outboundCode}
    </update>

    <!--    멤버코드 -> 창고코드 반환-->
    <select id="getWarehouseCode" resultType="String">
        select warehouseCode from Warehouse where memberCode = #{memberCode}
    </select>

    <!--   섹션복원 (출고완료) -->
    <update id="updateSection">
        update SECTION set storageCapacity = storageCapacity + #{quantity}
        where sectionCode = #{sectionCode}
    </update>


    <!--섹션코드 존재여부 확인-->
    <select id="checkSection" resultType="boolean">
        select case
        when exists(select 1 from section where sectionCode = #{sectionCode})
        then true
        else false
        end
    </select>

    <!--출고 삽입-->
    <insert id="insertOutbound">
        insert into outbound (outboundCode,outboundDate,outboundStatus,quantity,orderDetailCode,inventoryCode,vehicleCode)
        values (#{outboundCode},#{outboundDate},#{outboundStatus},#{quantity},#{orderDetailCode},#{inventoryCode},#{vehicleCode})
    </insert>

    <!--    최신 출고코드 조회 -->
    <select id="selectOutboundCode" resultType="String">
        Select outboundCode From outbound order by CAST(substring(outboundCode, 3) AS UNSIGNED) DESC LIMIT 1
    </select>

    <select id="selectOutboundVoOne"  resultType="com.donut.prokindonutsweb.outbound.vo.OutboundVO">
        SELECT * FROM outbound o WHERE o.outboundCode = #{outboundCode}
    </select>

    <select id="selectOutboundDtoOne"  resultType="com.donut.prokindonutsweb.outbound.dto.OutboundDTO">
        SELECT
        o.outboundCode,
        p.productCode,
        p.productName,
        o.outboundDate,
        o.vehicleCode,
        od.franchiseCode,
        o.outboundStatus
        FROM outbound o
        JOIN inventory i ON o.inventoryCode = i.inventoryCode
        JOIN product p ON i.productCode = p.productCode
        JOIN orderdetail odd ON o.orderDetailCode = odd.orderDetailCode
        JOIN `order` od ON od.orderCode = odd.orderCode
        WHERE o.outboundCode = #{outboundCode}
    </select>

    <!--출고 승인 시 재고 코드 등록-->
    <update id="updateInventoryCode">
        update outbound set inventoryCode = #{inventoryCode}
        where outboundCode = #{outboundCode}
    </update>

    <!--최적 차량 조회
    1. 해당 창고 보유 차량 중
    2. 출고요청일 2일 이내에(우선순위 : 당일 > 하루전 > 이틀전)
    3. 제품과 보관타입 일치
    4. 잔여 적재용량 존재
    5. 제품 출고량 적재가능한 차량 중
    6. 가장 잔여 적재용량이 큰 차량 조회
    -->
    <select id="selectVehicle" resultType="com.donut.prokindonutsweb.outbound.dto.VehicleScheduleDTO">
        select v.vehicleCode , vs.dispatchDate , o.quantity
        from outbound o
        left join inventory i on o.inventoryCode = i.inventoryCode
        left join warehouse w on i.warehouseCode = w.warehouseCode
        right join vehicle v on  v.warehouseCode = w. warehouseCode
        left join vehicleschedule vs on v.vehicleCode = vs.vehicleCode
        where o.outboundCode = #{outboundCode}
        and vs.dispatchDate IN ( #{outboundDate} ,
                                 DATE_SUB(#{outboundDate}, INTERVAL 1 DAY),
                                 DATE_SUB(#{outboundDate}, INTERVAL 2 DAY))
        and v.type = #{storedType}
        and vs.remainingCapacity > 0
        and vs.remainingCapacity - #{quantity} >= 0
        order by case vs.dispatchDate
            when #{outboundDate} THEN 0
            when DATE_SUB(#{outboundDate}, INTERVAL 1 DAY) THEN 1
            when DATE_SUB(#{outboundDate}, INTERVAL 2 DAY) THEN 2
            else 3
            end, v.capacity desc limit 1
    </select>

    <!--출고요청일 포함 3일 내의 해당창고의 차량이 차량스케쥴표에 등록되어있는 차량수 조회-->
    <select id="countRegisteredVehicleSchedule" resultType="int">
        select count(distinct v.vehicleCode)
        from vehicleschedule vs
        join vehicle v on  v.vehicleCode = vs. vehicleCode
        and vs.dispatchDate IN (#{outboundDate},
                                DATE_SUB(#{outboundDate}, INTERVAL 1 DAY),
                                DATE_SUB(#{outboundDate}, INTERVAL 2 DAY)
        )
        and v.type = #{storedType}
        and v.warehouseCode = #{warehouseCode}
    </select>

    <!-- 해당 창고의 보관타입이 출고제품의 보관타입과 일치하는 차량의 수 조회 -->
    <select id="countAllVehiclesInWarehouse" resultType="int">
        select count(distinct vehicleCode)
        from vehicle
        where warehouseCode = #{warehouseCode}
        and type = #{storedType}
    </select>

    <!--차량DTO조회 -->
    <select id="getVehicleDTO" resultType="com.donut.prokindonutsweb.outbound.dto.VehicleDTO">
        select o.outboundCode , i.warehouseCode , p.storedType , o.quantity, o.outboundDate
        from outbound o
        join inventory i on o.inventoryCode = i.inventoryCode
        join product p on i.productCode = p.productCode
        where o.outboundCode = #{outboundCode}
    </select>

    <!--차량VO조회 -->
    <select id="getVehicleVO" resultType="com.donut.prokindonutsweb.outbound.vo.VehicleVO">
        select vehicleCode , warehouseCode , type , capacity, vehicleNum
        from vehicle
        where warehouseCode = #{warehouseCode}
    </select>

    <!--해당날짜의 창고의 모든 차량을 스케쥴표에 등록 (중복제외)-->
    <insert id="insertVehicleSchedule">
        insert ignore into vehicleschedule (VehicleScheduleCode , dispatchDate , remainingCapacity, vehicleCode)
        values (#{vehicleScheduleCode},#{dispatchDate},#{remainingCapacity},#{vehicleCode})
    </insert>

    <!--    최신 차량스케줄코드 조회 -->
    <select id="selectVehicleScheduleCode" resultType="String">
        Select vehicleScheduleCode From vehicleschedule order by CAST(substring(vehicleScheduleCode, 3) AS UNSIGNED) DESC LIMIT 1
    </select>

    <!--   차량스케줄코드 (잔여 적재량 차감) -->
    <update id="updateVehicleSchedule">
        update vehicleschedule set remainingCapacity = remainingCapacity - #{quantity}
        where vehicleCode = #{vehicleCode} and dispatchDate = #{dispatchDate}
    </update>

</mapper>