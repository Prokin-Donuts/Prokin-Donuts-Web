<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.donut.prokindonutsweb.inventory.mapper.WmInventoryMapper">

    <!-- 1) 창고명을 조건으로 재고 조회 -->
    <select id="selectInventoryList" parameterType="String" resultType="InventorySelectDTO">
        SELECT
            i.barcode,
            p.storedType,
            c.categoryMid,
            c.categorySub,
            p.productName,
            i.quantity,
            i.expirationDate
        FROM Inventory i
                 JOIN Warehouse w ON i.warehouseCode = w.warehouseCode
                 JOIN Product p   ON i.productCode = p.productCode
                 JOIN Category c  ON p.categoryCode = c.categoryCode
        WHERE w.warehouseCode = #{warehouseCode}
    </select>

    <!-- 2) memberCode 멤버에게 할당된 창고가 있는지 확인 -->
    <select id="selectWarehouseCodeByMemberCode" resultType="String" parameterType="String">
        SELECT warehouseCode
        FROM Warehouse
        WHERE memberCode = #{memberCode}
    </select>

    <!-- 3) warehouseCode 창고의 창고명을 조회 -->
    <select id="selectWarehouseNameByWarehouseCode" resultType="String" parameterType="String">
        SELECT warehouseName
        FROM Warehouse
        WHERE warehouseCode = #{warehouseCode}
    </select>

    <!-- 4) 유통기한 지난 재고 조회 (warehouseCode 기준 필터링) -->
    <select id="selectExpiredItems"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.inventory.dto.InventoryExpiredDTO">
        SELECT
            i.inventoryCode,
            i.productCode,
            p.productName
        FROM Inventory i
                 JOIN Product p
                      ON i.productCode = p.productCode
        WHERE i.expirationDate &lt; NOW()
          AND i.warehouseCode   = #{warehouseCode}
    </select>

    <!-- 5) 유통기한 지난 재고 일괄 폐기 (warehouseCode 기준 필터링) -->
    <delete id="deleteExpiredItems"
            parameterType="string">
        DELETE FROM Inventory
        WHERE expirationDate &lt; CURDATE()
          AND warehouseCode    = #{warehouseCode}
    </delete>

    <!-- 6) 창고별 적정재고 조회 -->
    <select id="selectByWarehouse" resultType="com.donut.prokindonutsweb.inventory.dto.MinStockDTO">
        SELECT
            wms.warehouseCode,
            wms.productCode,
            p.productName,
            wms.MinStock AS minStock
        FROM WarehouseMinStock wms
                 JOIN Product p ON wms.productCode = p.productCode
        WHERE wms.warehouseCode = #{warehouseCode}
    </select>

    <!-- 7-1) 창고별 적정재고 수정 : 전달된 항목이 기존에 있으면 update, 없으면 insert -->
    <insert id="upsert">
        INSERT INTO WarehouseMinStock (warehouseCode, productCode, MinStock)
        VALUES (#{warehouseCode}, #{productCode}, #{minStock})
        ON DUPLICATE KEY UPDATE MinStock = #{minStock}
    </insert>

    <!-- 7-2) 창고별 적정재고 수정 : 전달되지 않은 항목에 대해 삭제 조치 -->
    <delete id="deleteMissingItems">
        DELETE FROM WarehouseMinStock
        WHERE warehouseCode = #{warehouseCode}
        <if test="productCodes != null and productCodes.size() > 0">
            AND productCode NOT IN
            <foreach item="code" collection="productCodes" open="(" separator="," close=")">
                #{code}
            </foreach>
        </if>
    </delete>

    <!-- 8) 창고별 적정재고 추가 : 검색결과를 Product 에서 조회 -->
    <select id="searchProducts" resultType="com.donut.prokindonutsweb.inventory.dto.MinStockProductDTO">
        SELECT productCode, productName
        FROM Product
        WHERE productName LIKE #{keyword}
        ORDER BY productName
    </select>

    <!-- 9) 적정재고량 제안 받기 버튼 클릭시 -->
    <!-- 1. 최근 1년의 날짜 테이블을 생성 (출고기록이 없는 날도 0이라는 데이터를 가지고 있으므로 365일의 데이터가 모두 필요) -->
    <!-- 2. 해당 창고에서 고려해야할 상품 풀 생성 : 과거 1년간 출고완료된 제품, 이미 WarehouseMinStock에서 관심대상으로 관리중인 제품, 현재 창고에 존재하는 제품 -->
    <!-- 3. 1번과 2번을 크로스 조인하여 모든 조합을 생성 -->
    <!-- 4. Outbound랑 Left Join 해서 출고가 없는 조합에 대해서도 데이터 0을 유지 -->
    <!-- 5. 1~4를 통해 생성된 데이터를 분석 : 제품별 일평균 출고량, 제품별 일수요 표준편차 -->
    <!-- 6. ROP 공식에 의거하여 계산 -->
    <!-- 7. 반올림으로 값 보정 -->
    <select id="selectSuggestedMinStock" resultType="map">
        WITH RECURSIVE date_dim AS (
            SELECT DATE_SUB(CURDATE(), INTERVAL 364 DAY) AS d
            UNION ALL
            SELECT DATE_ADD(d, INTERVAL 1 DAY) FROM date_dim
            WHERE d &lt;= CURDATE()
        ),
                       product_pool AS (
                           -- (1) 해당 창고에서 실제 출고된 상품
                           SELECT DISTINCT inv.productCode
                           FROM Outbound ob
                                    JOIN Inventory inv
                                         ON inv.inventoryCode = ob.inventoryCode
                                             AND inv.warehouseCode = #{warehouseCode}
                           WHERE ob.outboundStatus = '출고완료'
                             AND ob.outboundDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 364 DAY) AND CURDATE()
                           UNION
                           -- (2) 적정재고 테이블에 이미 등록된 상품
                           SELECT DISTINCT wms.productCode
                           FROM WarehouseMinStock wms
                           WHERE wms.warehouseCode = #{warehouseCode}
                           UNION
                           -- (3) 해당 창고에 보유 중인 모든 상품
                           SELECT DISTINCT inv2.productCode
                           FROM Inventory inv2
                           WHERE inv2.warehouseCode = #{warehouseCode}
                       ),
                       outbound_by_day AS (
                           -- 날짜×상품별 출고량(해당 창고 한정)
                           SELECT
                               ob.outboundDate AS d,
                               inv.productCode  AS productCode,
                               SUM(ob.quantity) AS qty
                           FROM Outbound ob
                                    JOIN Inventory inv
                                         ON inv.inventoryCode = ob.inventoryCode
                                             AND inv.warehouseCode = #{warehouseCode}
                           WHERE ob.outboundStatus = '출고완료'
                             AND ob.outboundDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 364 DAY) AND CURDATE()
                           GROUP BY ob.outboundDate, inv.productCode
                       ),
                       daily_demand AS (
                           -- 모든 날짜×상품 격자에 대해, 없으면 0으로 채움
                           SELECT
                               dd.d AS the_date,
                               pp.productCode AS productCode,
                               COALESCE(ob.qty, 0) AS qty
                           FROM date_dim dd
                                    CROSS JOIN product_pool pp
                                    LEFT JOIN outbound_by_day ob
                                              ON ob.d = dd.d
                                                  AND ob.productCode = pp.productCode
                       ),
                       product_stats AS (
                           SELECT
                               productCode,
                               AVG(qty) AS avgDailyDemand,
                               STDDEV_SAMP(qty) AS stdDailyDemand
                           FROM daily_demand
                           GROUP BY productCode
                       )
        SELECT
            p.productCode AS productCode,
            p.productName AS productName,
            CAST(
                    CEIL(
                            (
                                COALESCE(ps.avgDailyDemand, 0) * #{L}
                                    + #{z} * COALESCE(ps.stdDailyDemand, 0) * SQRT(#{L})
                                ) / GREATEST(#{packSize}, 1)
                    ) * GREATEST(#{packSize}, 1)
                AS SIGNED
            ) AS suggestedMinStock
        FROM product_stats ps
                 JOIN Product p ON p.productCode = ps.productCode
        ORDER BY p.productName;
    </select>
</mapper>