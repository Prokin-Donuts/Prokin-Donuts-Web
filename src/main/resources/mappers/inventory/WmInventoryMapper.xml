<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.donut.prokindonutsweb.inventory.mapper.WmInventoryMapper">

    <!-- 1) 창고명을 조건으로 재고 조회 -->
    <select id="selectInventoryList" parameterType="String" resultType="InventorySelectDTO">
        SELECT
            i.barcode,
            p.storedType,
            c.categoryMid,
            c.categorySub,
            p.productName,
            i.quantity,
            i.expirationDate
        FROM Inventory i
                 JOIN Warehouse w ON i.warehouseCode = w.warehouseCode
                 JOIN Product p   ON i.productCode = p.productCode
                 JOIN Category c  ON p.categoryCode = c.categoryCode
        WHERE w.warehouseCode = #{warehouseCode}
    </select>

    <!-- 2) memberCode 멤버에게 할당된 창고가 있는지 확인 -->
    <select id="selectWarehouseCodeByMemberCode" resultType="String" parameterType="String">
        SELECT warehouseCode
        FROM Warehouse
        WHERE memberCode = #{memberCode}
    </select>

    <!-- 3) warehouseCode 창고의 창고명을 조회 -->
    <select id="selectWarehouseNameByWarehouseCode" resultType="String" parameterType="String">
        SELECT warehouseName
        FROM Warehouse
        WHERE warehouseCode = #{warehouseCode}
    </select>

    <!-- 4) 유통기한 지난 재고 조회 (warehouseCode 기준 필터링) -->
    <select id="selectExpiredItems"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.inventory.dto.InventoryExpiredDTO">
        SELECT
            i.inventoryCode,
            i.productCode,
            p.productName
        FROM Inventory i
                 JOIN Product p
                      ON i.productCode = p.productCode
        WHERE i.expirationDate &lt; NOW()
          AND i.warehouseCode   = #{warehouseCode}
    </select>

    <!-- 5) 유통기한 지난 재고 일괄 폐기 (warehouseCode 기준 필터링) -->
    <delete id="deleteExpiredItems"
            parameterType="string">
        DELETE FROM Inventory
        WHERE expirationDate &lt; CURDATE()
          AND warehouseCode    = #{warehouseCode}
    </delete>

    <!-- 6) 창고별 적정재고 조회 -->
    <select id="selectByWarehouse" resultType="com.donut.prokindonutsweb.inventory.dto.MinStockDTO">
        SELECT
            wms.warehouseCode,
            wms.productCode,
            p.productName,
            wms.MinStock AS minStock
        FROM WarehouseMinStock wms
                 JOIN Product p ON wms.productCode = p.productCode
        WHERE wms.warehouseCode = #{warehouseCode}
    </select>

    <!-- 7-1) 창고별 적정재고 수정 : 전달된 항목이 기존에 있으면 update, 없으면 insert -->
    <insert id="upsert">
        INSERT INTO WarehouseMinStock (warehouseCode, productCode, MinStock)
        VALUES (#{warehouseCode}, #{productCode}, #{minStock})
        ON DUPLICATE KEY UPDATE MinStock = #{minStock}
    </insert>

    <!-- 7-2) 창고별 적정재고 수정 : 전달되지 않은 항목에 대해 삭제 조치 -->
    <delete id="deleteMissingItems">
        DELETE FROM WarehouseMinStock
        WHERE warehouseCode = #{warehouseCode}
        <if test="productCodes != null and productCodes.size() > 0">
            AND productCode NOT IN
            <foreach item="code" collection="productCodes" open="(" separator="," close=")">
                #{code}
            </foreach>
        </if>
    </delete>

    <!-- 8) 창고별 적정재고 추가 : 검색결과를 Product 에서 조회 -->
    <select id="searchProducts" resultType="com.donut.prokindonutsweb.inventory.dto.MinStockProductDTO">
        SELECT productCode, productName
        FROM Product
        WHERE productName LIKE #{keyword}
        ORDER BY productName
    </select>

</mapper>