<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.donut.prokindonutsweb.dashboard.mapper.WmDashboardMapper">
    <!-- 창고관리자(멤버) 코드로 해당 창고 코드 조회 -->
    <select id="selectWarehouseCodesByMember"
            parameterType="string"
            resultType="string">
        SELECT warehouseCode
        FROM Warehouse
        WHERE memberCode = #{memberCode}
    </select>

    <!--    ///////////////////////////////////////////////////////////////////////// -->

    <!-- 창고코드에 해당하는 섹션별 온도 조회 -->
    <select id="selectSectionTemperature"
            parameterType="map"
            resultType="int">
        SELECT temperature
        FROM Section
        WHERE warehouseCode = #{warehouseCode}
          AND storedType     = #{storedType}
    </select>

    <!-- 창고코드 & 섹션 타입에 해당하는 온도 수정 -->
    <update id="updateSectionTemperature"
            parameterType="map">
        UPDATE Section
        SET temperature = #{temperature}
        WHERE warehouseCode = #{warehouseCode}
          AND storedType     = #{storedType}
    </update>

    <!--    ///////////////////////////////////////////////////////////////////////// -->

    <!-- 미승인 입고요청, 미승인 출고요청 -->
    <!-- 오늘 미승인 입고요청 수 -->
    <select id="selectTodayWaitingInboundCount"
            parameterType="string"
            resultType="int">
        SELECT COUNT(*)
        FROM Inbound i
                 JOIN Warehouse w ON i.warehouseCode = w.warehouseCode
        WHERE i.inboundStatus = '승인대기'
          AND DATE(i.inboundDate) = CURDATE()
          AND w.warehouseCode = #{warehouseCode}
    </select>

    <!-- 오늘 미승인 출고대기 수 -->
<!--    <select id="selectWaitingOrderCount"-->
<!--            parameterType="string"-->
<!--            resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM Outbound o-->
<!--                 JOIN Inventory i-->
<!--                      ON o.inventoryCode = i.inventoryCode-->
<!--        WHERE o.outboundStatus = '출고대기'-->
<!--          AND i.warehouseCode = #{warehouseCode}-->
<!--    </select>-->
    <select id="selectTodayWaitingOrderCount"
            parameterType="string"
            resultType="int">
        SELECT COUNT(*)
        FROM Outbound o
                 JOIN Inventory i
                      ON o.inventoryCode = i.inventoryCode
        WHERE o.outboundStatus = '출고대기'
          AND i.warehouseCode = #{warehouseCode}
    </select>

    <!-- 유통기한 지난 재고 갯수 조회 -->
    <select id="selectExpiredInventoryCount"
            parameterType="string"
            resultType="int">
        SELECT COUNT(*)
        FROM Inventory
        WHERE warehouseCode   = #{warehouseCode}
          AND expirationDate &lt; NOW()
    </select>

    <!-- 적정재고량 미달 제품 개수 조회 (제품별 합계 비교) -->
    <select id="selectUnderMinStockCount"
            parameterType="string"
            resultType="int">
        SELECT COUNT(*)
        FROM (
                 SELECT
                     i.productCode
                 FROM Inventory i
                          JOIN WarehouseMinStock m
                               ON i.warehouseCode = m.warehouseCode
                                   AND i.productCode   = m.productCode
                 WHERE i.warehouseCode = #{warehouseCode}
                 GROUP BY i.productCode, m.minStock
                 HAVING SUM(i.quantity) &lt; m.minStock
             ) AS understock
    </select>

    <!--    ///////////////////////////////////////////////////////////////////////// -->
    <!--    ///////////////////////////////////////////////////////////////////////// -->
    <!--    ///////////////////////////////////////////////////////////////////////// -->

    <!-- 차트1 용 데이터 -->
    <!-- 1. 입고 - 최근 12개월 (월별) -->
    <select id="selectInboundCountLast12Months"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH RECURSIVE months AS (
        SELECT DATE_SUB(CURDATE(), INTERVAL 11 MONTH) AS month_date
        UNION ALL
        SELECT DATE_ADD(month_date, INTERVAL 1 MONTH)
        FROM months
        WHERE month_date &lt; CURDATE()
        )
        SELECT DATE_FORMAT(m.month_date, '%Y-%m') AS period,
        IFNULL(COUNT(i.inboundDate), 0) AS count
        FROM months m
        LEFT JOIN Inbound i
        ON DATE_FORMAT(i.inboundDate, '%Y-%m') = DATE_FORMAT(m.month_date, '%Y-%m')
        AND i.inboundStatus = '입고완료'
        AND i.warehouseCode = #{warehouseCode}
        GROUP BY period
        ORDER BY period
    </select>

    <!-- 2. 출고 - 최근 12개월 (월별) -->
    <select id="selectOrderCountLast12Months"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH RECURSIVE months AS (
            SELECT DATE_SUB(CURDATE(), INTERVAL 11 MONTH) AS month_date
            UNION ALL
            SELECT DATE_ADD(month_date, INTERVAL 1 MONTH)
            FROM months
            WHERE month_date &lt; CURDATE()
        ),
                       outbound_per_month AS (
                           SELECT
                               DATE_FORMAT(o.outboundDate, '%Y-%m') AS period,
                               COUNT(*) AS cnt
                           FROM Outbound o
                                    INNER JOIN Inventory i
                                               ON o.inventoryCode = i.inventoryCode
                                                   AND i.warehouseCode = #{warehouseCode}
                           WHERE o.outboundStatus = '출고완료'
                           GROUP BY DATE_FORMAT(o.outboundDate, '%Y-%m')
                       )
        SELECT
            DATE_FORMAT(m.month_date, '%Y-%m') AS period,
            IFNULL(opm.cnt, 0) AS count
        FROM months m
                 LEFT JOIN outbound_per_month opm
                           ON DATE_FORMAT(m.month_date, '%Y-%m') = opm.period
        ORDER BY period
    </select>

    <!-- 3. 입고 - 최근 4주 (주별) -->
    <select id="selectInboundCountLast4Weeks"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH weeks AS (
            SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL n WEEK), '%x-%v') AS period
            FROM (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS nums
        )
        SELECT w.period,
               IFNULL(COUNT(i.inboundDate), 0) AS count
        FROM weeks w
                 LEFT JOIN Inbound i
                           ON DATE_FORMAT(i.inboundDate, '%x-%v') = w.period
                               AND i.inboundStatus = '입고완료'
                               AND i.warehouseCode = #{warehouseCode}
                               AND i.inboundDate >= DATE_SUB(CURDATE(), INTERVAL 4 WEEK)
        GROUP BY w.period
        ORDER BY w.period
    </select>

    <!-- 4. 출고 - 최근 4주 (주별) -->
    <select id="selectOrderCountLast4Weeks"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH weeks AS (
            SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL n WEEK), '%x-%v') AS period
            FROM (
                     SELECT 0 AS n UNION ALL
                     SELECT 1 UNION ALL
                     SELECT 2 UNION ALL
                     SELECT 3
                 ) AS nums
        ),
             outbound_per_week AS (
                 SELECT
                     DATE_FORMAT(o.outboundDate, '%x-%v') AS period,
                     COUNT(*) AS cnt
                 FROM Outbound o
                          INNER JOIN Inventory i
                                     ON o.inventoryCode = i.inventoryCode
                                         AND i.warehouseCode = #{warehouseCode}
                 WHERE o.outboundStatus = '출고완료'
                   AND o.outboundDate >= DATE_SUB(CURDATE(), INTERVAL 4 WEEK)
                 GROUP BY DATE_FORMAT(o.outboundDate, '%x-%v')
             )
        SELECT
            w.period AS period,
            IFNULL(opw.cnt, 0) AS count
        FROM weeks w
                 LEFT JOIN outbound_per_week opw
                           ON w.period = opw.period
        ORDER BY w.period
    </select>

    <!-- 5. 입고 - 최근 5년 (연도별) -->
    <select id="selectInboundCountRecentYears"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH year_list AS (
            SELECT (YEAR(CURDATE()) - n) AS year
            FROM (
                     SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
                 ) AS nums
        )
        SELECT yl.year AS period,
               IFNULL(COUNT(i.inboundDate), 0) AS count
        FROM year_list yl
                 LEFT JOIN Inbound i
                           ON YEAR(i.inboundDate) = yl.year
                               AND i.inboundStatus = '입고완료'
                               AND i.warehouseCode = #{warehouseCode}
        GROUP BY yl.year
        ORDER BY yl.year
    </select>

    <!-- 6. 출고 - 최근 5년 (연도별) -->
    <select id="selectOrderCountRecentYears"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">
        WITH year_list AS (
            SELECT (YEAR(CURDATE()) - n) AS year
            FROM (
                     SELECT 0 AS n
                     UNION ALL SELECT 1
                     UNION ALL SELECT 2
                     UNION ALL SELECT 3
                     UNION ALL SELECT 4
                 ) AS nums
        )
        SELECT
            yl.year   AS period,
            COUNT(o.outboundDate) AS count
        FROM year_list yl
                 LEFT JOIN Outbound o
                           ON YEAR(o.outboundDate) = yl.year
                               AND o.outboundStatus = '출고완료'
                               AND EXISTS (
                                   SELECT 1
                                   FROM Inventory i
                                   WHERE i.inventoryCode = o.inventoryCode
                                     AND i.warehouseCode = #{warehouseCode}
                               )
        GROUP BY yl.year
        ORDER BY yl.year
    </select>


    <!-- Inbound 건수 집계 (년, 월, 주별) -->
<!--    <select id="selectInboundCountByYear" parameterType="string" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT YEAR(inboundDate)   AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM Inbound-->
<!--        WHERE inboundStatus = '입고완료'-->
<!--          AND warehouseCode = #{warehouseCode}-->
<!--        GROUP BY YEAR(inboundDate)-->
<!--        ORDER BY YEAR(inboundDate)-->
<!--    </select>-->
<!--    <select id="selectInboundCountByMonth" parameterType="map" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT MONTH(inboundDate)  AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM Inbound-->
<!--        WHERE inboundStatus = '입고완료'-->
<!--          AND YEAR(inboundDate)  = #{year}-->
<!--          AND warehouseCode     = #{warehouseCode}-->
<!--        GROUP BY MONTH(inboundDate)-->
<!--        ORDER BY MONTH(inboundDate)-->
<!--    </select>-->
<!--    <select id="selectInboundCountByWeek" parameterType="map" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT WEEK(inboundDate,1) AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM Inbound-->
<!--        WHERE inboundStatus = '입고완료'-->
<!--          AND YEAR(inboundDate)  = #{year}-->
<!--          AND warehouseCode     = #{warehouseCode}-->
<!--        GROUP BY WEEK(inboundDate,1)-->
<!--        ORDER BY WEEK(inboundDate,1)-->
<!--    </select>-->

    <!-- Order 건수 집계 (년, 월, 주별) -->
<!--    <select id="selectOrderCountByYear" parameterType="string" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT YEAR(orderDate)     AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM `Order`-->
<!--        WHERE orderStatus = '출고완료'-->
<!--          AND warehouseCode = #{warehouseCode}-->
<!--        GROUP BY YEAR(orderDate)-->
<!--        ORDER BY YEAR(orderDate)-->
<!--    </select>-->
<!--    <select id="selectOrderCountByMonth" parameterType="map" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT MONTH(orderDate)    AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM `Order`-->
<!--        WHERE orderStatus = '출고완료'-->
<!--          AND YEAR(orderDate)    = #{year}-->
<!--          AND warehouseCode     = #{warehouseCode}-->
<!--        GROUP BY MONTH(orderDate)-->
<!--        ORDER BY MONTH(orderDate)-->
<!--    </select>-->
<!--    <select id="selectOrderCountByWeek" parameterType="map" resultType="com.donut.prokindonutsweb.dashboard.dto.CountStatDTO">-->
<!--        SELECT WEEK(orderDate,1)   AS period,-->
<!--               COUNT(*)            AS count-->
<!--        FROM `Order`-->
<!--        WHERE orderStatus = '출고완료'-->
<!--          AND YEAR(orderDate)    = #{year}-->
<!--          AND warehouseCode     = #{warehouseCode}-->
<!--        GROUP BY WEEK(orderDate,1)-->
<!--        ORDER BY WEEK(orderDate,1)-->
<!--    </select>-->

<!--    ///////////////////////////////////////////////////////////////////////// -->
<!--    ///////////////////////////////////////////////////////////////////////// -->
<!--    ///////////////////////////////////////////////////////////////////////// -->

    <!-- 차트2 용 데이터 -->
    <!-- 창고코드에 해당하는 창고의 현재 총 자산 -->
    <select id="selectTotalInventoryPrice"
            parameterType="string"
            resultType="long">
        SELECT
            SUM(i.quantity * p.productPrice)
        FROM Inventory i
                 JOIN Product   p  ON i.productCode   = p.productCode
                 JOIN Warehouse w  ON i.warehouseCode = w.warehouseCode
        WHERE w.warehouseCode = #{warehouseCode}
    </select>

<!--    &lt;!&ndash; 제품별 재고 현황 (warehouseCode로 필터) &ndash;&gt;-->
<!--    <select id="selectProductInventoryByWarehouse"-->
<!--            parameterType="string"-->
<!--            resultType="com.donut.prokindonutsweb.dashboard.dto.InventoryStatisticDTO">-->
<!--        SELECT-->
<!--            p.productName AS name,-->
<!--            SUM(i.quantity)    AS quantity-->
<!--        FROM Inventory i-->
<!--                 JOIN Product   p  ON i.productCode   = p.productCode-->
<!--                 JOIN Warehouse w  ON i.warehouseCode = w.warehouseCode-->
<!--        WHERE w.warehouseCode = #{warehouseCode}-->
<!--        GROUP BY p.productName-->
<!--    </select>-->

    <!-- 카테고리별 재고 현황 -->
    <select id="selectCategoryInventoryByWarehouse"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.InventoryStatisticDTO">
        SELECT
            c.categoryMid AS name,
            SUM(i.quantity) AS quantity
        FROM Inventory i
                 JOIN Product   p  ON i.productCode   = p.productCode
                 JOIN Category  c  ON p.categoryCode  = c.categoryCode
                 JOIN Warehouse w  ON i.warehouseCode = w.warehouseCode
        WHERE w.warehouseCode = #{warehouseCode}
        GROUP BY c.categoryMid
    </select>

    <!-- 카테고리별 제품별 재고 목록 조회 -->
    <select id="selectSubcategoryProductInventoryByWarehouse"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.SubcategoryProductInventoryDTO">
        SELECT
            c.categorySub  AS subcategoryName,
            p.productName    AS productName,
            SUM(i.quantity)  AS quantity
        FROM Inventory i
                 JOIN Product   p ON i.productCode   = p.productCode
                 JOIN Category  c ON p.categoryCode  = c.categoryCode
        WHERE i.warehouseCode = #{warehouseCode}
        GROUP BY c.categorySub, p.productName
        ORDER BY c.categorySub, p.productName
    </select>

<!--    &lt;!&ndash; 섹션별 재고 현황 (storedType 파라미터로 분기) &ndash;&gt;-->
<!--    <select id="selectSectionInventoryByStoredType" parameterType="map" resultType="com.donut.prokindonutsweb.dashboard.dto.InventoryStatisticDTO">-->
<!--        SELECT-->
<!--            p.storedType AS name,-->
<!--            SUM(i.quantity) AS quantity-->
<!--        FROM Inventory i-->
<!--                 JOIN Product   p  ON i.productCode   = p.productCode-->
<!--                 JOIN Warehouse w  ON i.warehouseCode = w.warehouseCode-->
<!--        WHERE w.warehouseCode = #{warehouseCode}-->
<!--          AND p.storedType     = #{storedType}-->
<!--        GROUP BY p.storedType-->
<!--    </select>-->

    <!-- 섹션 사용률 (percent) -->
    <select id="selectSectionUsageRateByWarehouse"
            parameterType="string"
            resultType="com.donut.prokindonutsweb.dashboard.dto.SectionUsageDTO">
        SELECT
            s.storedType,
            ROUND(
                    IFNULL(SUM(i.quantity),0)
                        / (s.storageCapacity + IFNULL(SUM(i.quantity),0))
                        * 100,
                    2
            ) AS usedRate
        FROM Section s
                 LEFT JOIN Inventory i
                           ON s.warehouseCode = i.warehouseCode
                 LEFT JOIN Product p
                           ON i.productCode = p.productCode
                               AND p.storedType = s.storedType
        WHERE s.warehouseCode = #{warehouseCode}
        GROUP BY s.sectionCode, s.storedType
        ORDER BY FIELD(s.storedType, '냉장','냉동','상온')
    </select>

</mapper>