<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.donut.prokindonutsweb.franchise.mapper.FranchiseMapper">

    <!-- 1) 가맹점 목록 조회 -->
    <select id="selectFranchiseList" resultType="FranchiseDTO">
        SELECT
        f.franchiseCode,
        f.franchiseLocation,
        f.franchiseName,
        f.donutMinOrder,
        f.memberCode,
        m.name   AS memberName,
        m.email  AS memberEmail
        FROM Franchise f
        LEFT JOIN MemberAccount m
        ON f.memberCode = m.memberCode
    </select>

    <!-- 2) 가맹점 등록 -->
    <insert id="insertFranchise" parameterType="FranchiseVO">
        INSERT INTO Franchise
        (franchiseCode, franchiseLocation, franchiseName, memberCode, donutMinOrder)
        VALUES
            (#{franchiseCode}, #{franchiseLocation}, #{franchiseName}, #{memberCode},
                <choose>
                    <when test="franchiseCode != null and (
                                franchiseCode.startsWith('GG') or
                                franchiseCode.startsWith('IC') or
                                franchiseCode.startsWith('SL') )">
                        100
                    </when>
                    <otherwise>
                        50
                    </otherwise>
                </choose>
            )
    </insert>

    <!-- 3) 가맹점 수정 -->
    <update id="updateFranchise" parameterType="FranchiseVO">
        UPDATE Franchise
        SET franchiseName     = #{franchiseName},
            memberCode        = #{memberCode}
        WHERE franchiseCode   = #{franchiseCode}
    </update>

    <!-- 4) 가맹점 삭제 -->
    <delete id="deleteFranchise" parameterType="FranchiseVO">
        DELETE FROM Franchise
        WHERE franchiseCode = #{franchiseCode}
    </delete>

    <!-- 5) 할당되지 않은 가맹점 관리자 목록 조회 -->
    <select id="selectUnAccountFMList" resultType="MemberAccountVO">
        SELECT
            m.memberCode,
            m.authorityCode,
            m.name
        FROM MemberAccount m
        WHERE m.memberCode NOT IN (
            SELECT f.memberCode
            FROM Franchise f
            WHERE f.memberCode IS NOT NULL
        ) AND m.authorityCode LIKE '%FM%'
    </select>

    <!-- 6) 가맹점명 중복 확인 -->
    <select id="checkFranchiseDuplicate" parameterType="FranchiseVO" resultType="int">
        SELECT COUNT(*)
        FROM Franchise
        WHERE franchiseName = #{franchiseName}
        <if test="franchiseCode != null and franchiseCode != ''">
            AND franchiseCode != #{franchiseCode}
        </if>
    </select>

    <!-- 7) prefix로 시작하는 가맹점코드 조회 -->
    <select id="selectFranchiseCodesByPrefix" parameterType="string" resultType="string">
        SELECT franchiseCode
        FROM Franchise
        WHERE franchiseCode LIKE CONCAT(#{prefix}, '%')
    </select>

    <!-- 8) 가맹점 상태 조회 -->
    <select id="selectFranchiseStatus" parameterType="string" resultType="string">
        SELECT
            CASE
                WHEN EXISTS (
                    SELECT 1 FROM `Order` o
                    WHERE o.franchiseCode = #{franchiseCode}
                      AND o.orderStatus IN ('발주진행','승인대기')
                ) THEN '발주진행'
                ELSE '삭제가능'
                END AS status
    </select>

</mapper>
